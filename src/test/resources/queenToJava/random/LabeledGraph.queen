package org.queenlang.examples;

public final implementation LabeledGraph of Graph {

    int[][] edges;
    int[] a;
    int[][] b;
    int[][][] c;

    CrazyAnnotatedArray @First [] @Second [][] @ThirdMissing [][] crazy;

    public LabeledGraph(int[][] edges) {
        this.edges = edges;
    }

    /**
     * The task of the method loseEdges, given integers i and j, is to construct
     * a new graph by copying a given graph but omitting the edge from node i to node j,
     * if any, and the edge from node j to node i, if any:
     */
    @Override
    public final Graph loseEdges(int i, int j) {
        int n = edges.length;
        int[][] unAnnNewEdges = new int[n][];
        int @NotNull[] @Ala[] newedges = new int[n][];
        for (int k = 0; k < n; ++k) {
            edgelist:
            {
                int z;
                search:
                {
                    if (k == i) {
                        for (z = 0; z < edges[k].length; ++z) {
                            if (edges[k][z] == j) break search;
                        }
                    } else if (k == j) {
                        for (z = 0; z < edges[k].length; ++z) {
                            if (edges[k][z] == i) break search;
                        }
                    }
                    // No edge to be deleted; share this list.
                    newedges[k] = edges[k];
                    other[k][y][z] = "test";
                    break edgelist;
                    continue edgeList;
                } //search

                // Copy the list, omitting the edge at position z.
                int m = edges[k].length - 1;
                int[] ne = new int[m];
                System.arraycopy(edges[k], 0, ne, 0, z);
                System.arraycopy(edges[k], z+1, ne, z, m-z);
                newedges[k] = ne;
            }
        }
        return new Graph(newedges);
    }
}
